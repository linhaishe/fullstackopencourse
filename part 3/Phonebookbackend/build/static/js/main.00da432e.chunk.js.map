{"version":3,"sources":["services/persons.js","components/Persons.js","components/PersonsForm.js","components/Filter.js","components/SuccessNotification.js","components/ErrorNotification.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","deleteId","delete","Persons","persons","handleDelete","console","log","name","number","onClick","PersonsForm","addName","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Filter","filterResult","SuccessNotification","message","className","ErrorNotification","App","useState","setPersons","setNewName","setNewNumber","newFilterword","setNewFilterword","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","personService","then","response","data","filter","item","values","Object","str","map","String","toLowerCase","find","includes","toString","idProp","personToBeRemoved","person","window","confirm","n","catch","err","setTimeout","event","target","i","personsCopy","preventDefault","nameObject","replace","length","alert","JSON","stringify","indexOf","concat","duplicateCheck","returnedPerson","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.00da432e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n// const baseUrl = \"http://localhost:3001/persons\";\r\n//建立后端后，此页面没有效果了\r\nconst baseUrl = \"/persons\";\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl);\r\n  // const request = axios.get(baseUrl);\r\n  // return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  return axios.post(baseUrl, newObject);\r\n  // const request = axios.post(baseUrl, newObject);\r\n  // return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject);\r\n  // const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  // return request.then((response) => response.data);\r\n};\r\n\r\nconst deleteperson = (deleteId) => {\r\n  return axios.delete(`${baseUrl}/${deleteId}`);\r\n  // const request = axios.delete(`${baseUrl}/${deleteId}`);\r\n  // return request.then((response) => response.data);\r\n};\r\n\r\nexport default { getAll, create, update, deleteperson };\r\n","import React from \"react\";\r\n\r\n//显示人名组件\r\nconst Persons = ({ persons, handleDelete }) => {\r\n  console.log({ persons });\r\n  return (\r\n    <>\r\n      <li>\r\n        {persons.name} {persons.number}\r\n        <button onClick={handleDelete}> delete</button>\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","import React from 'react'\r\n\r\nconst PersonsForm =({addName,newName,handleNameChange,newNumber,handleNumberChange})=>{\r\n    return(\r\n        <form onSubmit={addName}>\r\n        <div>\r\n          name: <input value={newName} onChange={handleNameChange}/>\r\n        </div>\r\n        <div>\r\n          number: <input value={newNumber} onChange={handleNumberChange}/>\r\n        </div>\r\n\r\n        <div>\r\n          <button type=\"submit\" >add</button>\r\n        </div>\r\n      </form>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default PersonsForm\r\n","import React from \"react\";\r\n\r\n// const Filter =({newFilterword,setNewFilterword,persons})=>{\r\n\r\n//  //const personsCopy ={...persons}\r\n\r\n//  const filterByValue = function filterByValue(arr, word) {\r\n//   return arr.filter(o =>\r\n//       Object.keys(o).some(k => o[k].toLowerCase().includes(word.toLowerCase())));\r\n// }\r\n\r\n// const result = filterByValue(persons,newFilterword);\r\n// console.log('result',result)\r\n\r\n//   const handleFilterwordChange =(event)=>{\r\n//     setNewFilterword(event.target.value)\r\n//   }\r\n\r\n//   return(\r\n//     <div>\r\n//       filter shown with a <input value={newFilterword} onChange={handleFilterwordChange}/>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n//不在组件中写任何函数和算法，并在APP根组件下进行遍历显示\r\nconst Filter = ({ filterResult }) => {\r\n  return (\r\n    <li>\r\n      {filterResult.name} {filterResult.number}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst SuccessNotification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"success\">{message}</div>;\r\n};\r\n\r\nexport default SuccessNotification;\r\n","import React from \"react\";\r\n\r\nconst ErrorNotification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default ErrorNotification;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\n// import axios from \"axios\";\r\nimport personService from \"./services/persons\";\r\n\r\nimport Persons from \"./components/Persons\";\r\nimport PersonsForm from \"./components/PersonsForm\";\r\nimport Filter from \"./components/Filter\";\r\nimport SuccessNotification from \"./components/SuccessNotification\";\r\nimport ErrorNotification from \"./components/ErrorNotification\";\r\n\r\n// axios.get(\"http://localhost:3001/api/persons\").then((response) => {\r\n//   const persons = response.data;\r\n//   console.log(\"axios\", persons);\r\n// });\r\n\r\nconst App = () => {\r\n  //这个状态用props传进来的初始人名数组作为状态初始化，保存到notes中。\r\n  const [persons, setPersons] = useState([]);\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n  const [newFilterword, setNewFilterword] = useState(\"\");\r\n  const [successMessage, setSuccessMessage] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log(\"effect\");\r\n    // axios.get(\"http://localhost:3001/persons\")\r\n    personService.getAll().then((response) => {\r\n      console.log(\"getAll()response\", response);\r\n      console.log(\"promise fulfilled\");\r\n      setPersons(response.data);\r\n      console.log(\"getAll()response.data\", response.data);\r\n    });\r\n  }, []);\r\n  // console.log(\"render\", persons.length, \"notes\");\r\n\r\n  const addName = (event) => {\r\n    const personsCopy = { ...persons };\r\n\r\n    console.log(\"personsCopy\", personsCopy);\r\n    console.log(\"newName\", newName);\r\n    console.log(\"personsCopy0.name\", personsCopy[0].name);\r\n    console.log(\"personspersons\", persons);\r\n    // alert('提交的名字: ' + newName);\r\n    event.preventDefault();\r\n    console.log(\"button clicked\", event.target);\r\n\r\n    //设定一个对象格式，确定数据的保存格式为一个对象\r\n    const nameObject = {\r\n      name: newName,\r\n      number: newNumber,\r\n    };\r\n\r\n    console.log(\"addnameObject\", nameObject);\r\n    console.log(\"nameObject.name\", nameObject.name);\r\n\r\n    //如果为空值则提醒\r\n    if (\r\n      String(nameObject.name).replace(/(^\\s*)|(\\s*$)/g, \"\").length === 0 ||\r\n      String(nameObject.number).replace(/(^\\s*)|(\\s*$)/g, \"\").length === 0\r\n    ) {\r\n      console.log(\"nameObject.name\", nameObject.name);\r\n      alert(\"empty string,plz reconfirm\");\r\n      //未存在则添加\r\n    } else if (\r\n      JSON.stringify(personsCopy).indexOf(JSON.stringify(newName)) === -1\r\n    ) {\r\n      //添加新便笺到便笺列表中，concat方式数组添加\r\n      // setPersons(persons.concat(nameObject));\r\n      //重置受控input元素的值\r\n      // setNewName(\"\");\r\n      // setNewNumber(\"\");\r\n\r\n      personService\r\n        .create(nameObject)\r\n        // .post(\"http://localhost:3001/persons\", nameObject)\r\n        .then((response) => {\r\n          setSuccessMessage(`Note '${newName}' was add successfully`);\r\n          setTimeout(() => {\r\n            setSuccessMessage(null);\r\n          }, 5000);\r\n          setPersons(persons.concat(response.data));\r\n          setNewName(\"\");\r\n          setNewNumber(\"\");\r\n        });\r\n    } else {\r\n      //存在则提醒,并询问是否替换内容\r\n      const duplicateCheck = persons.find((person) => person.name === newName);\r\n      //名字相同，电话不同,则询问是否替换\r\n      if (\r\n        typeof duplicateCheck !== \"undefined\" &&\r\n        duplicateCheck.number !== newNumber\r\n      ) {\r\n        personService\r\n          .update(duplicateCheck.id, {\r\n            name: duplicateCheck.name,\r\n            number: newNumber,\r\n          })\r\n          .then((returnedPerson) => {\r\n            if (\r\n              window.confirm(\r\n                `${returnedPerson.name} is already added to phonebook,replace the old number with a new one?`\r\n              )\r\n            ) {\r\n              setPersons(\r\n                persons.map((person) =>\r\n                  person.id !== duplicateCheck.id ? person : returnedPerson\r\n                )\r\n              );\r\n            }\r\n            setNewName(\"\");\r\n            setNewNumber(\"\");\r\n          })\r\n          .catch((error) => {\r\n            console.log(\"fail\");\r\n            setErrorMessage(\r\n              `Information of '${newName}' has already been removed from the server`\r\n            );\r\n            setTimeout(() => {\r\n              setErrorMessage(null);\r\n            }, 5000);\r\n          });\r\n        //为什么要加return?\r\n        // return;\r\n      } else if (typeof duplicateCheck !== \"undefined\") {\r\n        //名字电话相同则提醒已存在\r\n        alert(`${newName} is already added to phonebook`);\r\n        setNewName(\"\");\r\n        setNewNumber(\"\");\r\n        // return;\r\n      }\r\n    }\r\n\r\n    //question : 不去除前后无效空字符串，否则也会被添加\r\n    //question:需刷新后替换的新数据才会显示，如何优化？\r\n  };\r\n\r\n  function filterByValue(values, str) {\r\n    return values\r\n      .map(function (value) {\r\n        return String(value).toLowerCase();\r\n      })\r\n      .find(function (value) {\r\n        return value.includes(str.toString().toLowerCase());\r\n      });\r\n  }\r\n\r\n  const filterResult = persons.filter(function (item) {\r\n    return filterByValue(Object.values(item), newFilterword);\r\n  });\r\n\r\n  console.log(\"result2222\", filterResult);\r\n  console.log(\"persons2222\", persons);\r\n  console.log(\"newFilterword2222\", newFilterword);\r\n\r\n  const handleDelete = (idProp) => {\r\n    console.log(idProp);\r\n    console.log(\"handleDelete\", persons);\r\n    const personToBeRemoved = persons.find(person => person.id === idProp)\r\n    const id = personToBeRemoved.id\r\n    const name = personToBeRemoved.name\r\n    if (\r\n      window.confirm(`Do you really want to delete ${name}?`)\r\n    ) {\r\n      personService\r\n        .deleteperson(id)\r\n        .then((response) => {\r\n          //为什么这里console出来空数组？\r\n          console.log(\"deletedeletedelete\", response.data);\r\n          setPersons(persons.filter((n) => n.id !== id));\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setErrorMessage(\r\n            `Information of '${name}' has already been removed from the server`\r\n          );\r\n          setTimeout(() => {\r\n            setErrorMessage(null);\r\n          }, 5000);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleNameChange = (event) => {\r\n    console.log(event.target.value);\r\n    setNewName(event.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (event) => {\r\n    console.log(event.target.value);\r\n    setNewNumber(event.target.value);\r\n  };\r\n\r\n  const handleFilterwordChange = (event) => {\r\n    setNewFilterword(event.target.value);\r\n  };\r\n\r\n  //根据输入的自字符进行筛选\r\n  // const filterByValue = function filterByValue(arr, word) {\r\n  //   return arr.filter((o) =>\r\n  //     Object.keys(o).some((k) =>\r\n  //       o[k].toLowerCase().includes(word.toLowerCase())\r\n  //     )\r\n  //   );\r\n  // };\r\n  //TypeError: o[k].toLowerCase is not a function\r\n\r\n  //input数据转化为字符串便于筛选function 运行\r\n  // const inputValue = newFilterword.toString();\r\n  // console.log(\"typeof inputValue\", typeof inputValue);\r\n\r\n  //得到筛选结果\r\n  // const result = filterByValue(persons, inputValue);\r\n  return (\r\n    <div>\r\n      <ErrorNotification message={errorMessage} />\r\n      <SuccessNotification message={successMessage} />\r\n      <h2>Phonebook</h2>\r\n      filter shown with{\" \"}\r\n      <input value={newFilterword} onChange={handleFilterwordChange} />\r\n      <p>\r\n        {filterResult.map((filterResult, i) => (\r\n          <Filter key={i} filterResult={filterResult} />\r\n        ))}\r\n      </p>\r\n      <h1>add a new</h1>\r\n      <PersonsForm\r\n        addName={addName}\r\n        newName={newName}\r\n        handleNameChange={handleNameChange}\r\n        newNumber={newNumber}\r\n        handleNumberChange={handleNumberChange}\r\n      />\r\n      <h2>Numbers</h2>\r\n      <p>\r\n        {/* 数的顺序会影响显示，person,name不等于name,person */}\r\n        {persons.map((persons, i) => (\r\n          <Persons\r\n            key={i}\r\n            persons={persons}\r\n            handleDelete={() => handleDelete(persons.id)}\r\n          />\r\n        ))}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}