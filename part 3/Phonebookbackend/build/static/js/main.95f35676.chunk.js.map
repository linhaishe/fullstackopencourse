{"version":3,"sources":["services/persons.js","components/Persons.js","components/PersonsForm.js","components/Filter.js","components/SuccessNotification.js","components/ErrorNotification.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","deleteId","delete","Persons","persons","handleDelete","console","log","name","number","onClick","PersonsForm","addName","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Filter","filterResult","SuccessNotification","message","className","ErrorNotification","App","useState","setPersons","setNewName","setNewNumber","newFilterword","setNewFilterword","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","personService","then","response","data","filter","item","values","Object","str","map","String","toLowerCase","find","includes","toString","window","confirm","n","catch","err","setTimeout","event","target","i","personsCopy","preventDefault","nameObject","replace","length","alert","JSON","stringify","indexOf","concat","duplicateCheck","person","returnedPerson","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95f35676.chunk.js","sourcesContent":["import axios from \"axios\";\n// const baseUrl = \"http://localhost:3001/persons\";\n//建立后端后，此页面没有效果了\nconst baseUrl = \"/persons\";\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n  // const request = axios.get(baseUrl);\n  // return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  return axios.post(baseUrl, newObject);\n  // const request = axios.post(baseUrl, newObject);\n  // return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject);\n  // const request = axios.put(`${baseUrl}/${id}`, newObject);\n  // return request.then((response) => response.data);\n};\n\nconst deleteperson = (deleteId) => {\n  return axios.delete(`${baseUrl}/${deleteId}`);\n  // const request = axios.delete(`${baseUrl}/${deleteId}`);\n  // return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update, deleteperson };\n","import React from \"react\";\n\n//显示人名组件\nconst Persons = ({ persons, handleDelete }) => {\n  console.log({ persons });\n  return (\n    <>\n      <li>\n        {persons.name} {persons.number}\n        <button onClick={handleDelete}> delete</button>\n      </li>\n    </>\n  );\n};\n\nexport default Persons;\n","import React from 'react'\n\nconst PersonsForm =({addName,newName,handleNameChange,newNumber,handleNumberChange})=>{\n    return(\n        <form onSubmit={addName}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange}/>\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange}/>\n        </div>\n\n        <div>\n          <button type=\"submit\" >add</button>\n        </div>\n      </form>\n\n    )\n}\n\n\nexport default PersonsForm\n","import React from \"react\";\n\n// const Filter =({newFilterword,setNewFilterword,persons})=>{\n\n//  //const personsCopy ={...persons}\n\n//  const filterByValue = function filterByValue(arr, word) {\n//   return arr.filter(o =>\n//       Object.keys(o).some(k => o[k].toLowerCase().includes(word.toLowerCase())));\n// }\n\n// const result = filterByValue(persons,newFilterword);\n// console.log('result',result)\n\n//   const handleFilterwordChange =(event)=>{\n//     setNewFilterword(event.target.value)\n//   }\n\n//   return(\n//     <div>\n//       filter shown with a <input value={newFilterword} onChange={handleFilterwordChange}/>\n//     </div>\n//   )\n// }\n\n//不在组件中写任何函数和算法，并在APP根组件下进行遍历显示\nconst Filter = ({ filterResult }) => {\n  return (\n    <li>\n      {filterResult.name} {filterResult.number}\n    </li>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\n\nconst SuccessNotification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"success\">{message}</div>;\n};\n\nexport default SuccessNotification;\n","import React from \"react\";\n\nconst ErrorNotification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default ErrorNotification;\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\n// import axios from \"axios\";\nimport personService from \"./services/persons\";\n\nimport Persons from \"./components/Persons\";\nimport PersonsForm from \"./components/PersonsForm\";\nimport Filter from \"./components/Filter\";\nimport SuccessNotification from \"./components/SuccessNotification\";\nimport ErrorNotification from \"./components/ErrorNotification\";\n\n// axios.get(\"http://localhost:3001/api/persons\").then((response) => {\n//   const persons = response.data;\n//   console.log(\"axios\", persons);\n// });\n\nconst App = () => {\n  //这个状态用props传进来的初始人名数组作为状态初始化，保存到notes中。\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [newFilterword, setNewFilterword] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    console.log(\"effect\");\n    // axios.get(\"http://localhost:3001/persons\")\n    personService.getAll().then((response) => {\n      console.log(\"getAll()response\", response);\n      console.log(\"promise fulfilled\");\n      setPersons(response.data);\n      console.log(\"getAll()response.data\", response.data);\n    });\n  }, []);\n  // console.log(\"render\", persons.length, \"notes\");\n\n  const addName = (event) => {\n    const personsCopy = { ...persons };\n\n    console.log(\"personsCopy\", personsCopy);\n    console.log(\"newName\", newName);\n    console.log(\"personsCopy0.name\", personsCopy[0].name);\n    console.log(\"personspersons\", persons);\n    // alert('提交的名字: ' + newName);\n    event.preventDefault();\n    console.log(\"button clicked\", event.target);\n\n    //设定一个对象格式，确定数据的保存格式为一个对象\n    const nameObject = {\n      name: newName,\n      number: newNumber,\n    };\n\n    console.log(\"addnameObject\", nameObject);\n    console.log(\"nameObject.name\", nameObject.name);\n\n    //如果为空值则提醒\n    if (\n      String(nameObject.name).replace(/(^\\s*)|(\\s*$)/g, \"\").length === 0 ||\n      String(nameObject.number).replace(/(^\\s*)|(\\s*$)/g, \"\").length === 0\n    ) {\n      console.log(\"nameObject.name\", nameObject.name);\n      alert(\"empty string,plz reconfirm\");\n      //未存在则添加\n    } else if (\n      JSON.stringify(personsCopy).indexOf(JSON.stringify(newName)) === -1\n    ) {\n      //添加新便笺到便笺列表中，concat方式数组添加\n      // setPersons(persons.concat(nameObject));\n      //重置受控input元素的值\n      // setNewName(\"\");\n      // setNewNumber(\"\");\n\n      personService\n        .create(nameObject)\n        // .post(\"http://localhost:3001/persons\", nameObject)\n        .then((response) => {\n          setSuccessMessage(`Note '${newName}' was add successfully`);\n          setTimeout(() => {\n            setSuccessMessage(null);\n          }, 5000);\n          setPersons(persons.concat(response.data));\n          setNewName(\"\");\n          setNewNumber(\"\");\n        });\n    } else {\n      //存在则提醒,并询问是否替换内容\n      const duplicateCheck = persons.find((person) => person.name === newName);\n      //名字相同，电话不同,则询问是否替换\n      if (\n        typeof duplicateCheck !== \"undefined\" &&\n        duplicateCheck.number !== newNumber\n      ) {\n        personService\n          .update(duplicateCheck.id, {\n            name: duplicateCheck.name,\n            number: newNumber,\n          })\n          .then((returnedPerson) => {\n            if (\n              window.confirm(\n                `${returnedPerson.name} is already added to phonebook,replace the old number with a new one?`\n              )\n            ) {\n              setPersons(\n                persons.map((person) =>\n                  person.id !== duplicateCheck.id ? person : returnedPerson\n                )\n              );\n            }\n            setNewName(\"\");\n            setNewNumber(\"\");\n          })\n          .catch((error) => {\n            console.log(\"fail\");\n            setErrorMessage(\n              `Information of '${newName}' has already been removed from the server`\n            );\n            setTimeout(() => {\n              setErrorMessage(null);\n            }, 5000);\n          });\n        //为什么要加return?\n        // return;\n      } else if (typeof duplicateCheck !== \"undefined\") {\n        //名字电话相同则提醒已存在\n        alert(`${newName} is already added to phonebook`);\n        setNewName(\"\");\n        setNewNumber(\"\");\n        // return;\n      }\n    }\n\n    //question : 不去除前后无效空字符串，否则也会被添加\n    //question:需刷新后替换的新数据才会显示，如何优化？\n  };\n\n  function filterByValue(values, str) {\n    return values\n      .map(function (value) {\n        return String(value).toLowerCase();\n      })\n      .find(function (value) {\n        return value.includes(str.toString().toLowerCase());\n      });\n  }\n\n  const filterResult = persons.filter(function (item) {\n    return filterByValue(Object.values(item), newFilterword);\n  });\n\n  console.log(\"result2222\", filterResult);\n  console.log(\"persons2222\", persons);\n  console.log(\"newFilterword2222\", newFilterword);\n\n  const handleDelete = (id) => {\n    console.log(\"handleDelete\", persons);\n    if (\n      window.confirm(`Do you really want to delete ${persons[id - 1].name}?`)\n    ) {\n      personService\n        .deleteperson(id)\n        .then((response) => {\n          //为什么这里console出来空数组？\n          console.log(\"deletedeletedelete\", response.data);\n          setPersons(persons.filter((n) => n.id !== id));\n        })\n        .catch((err) => {\n          console.log(err);\n          setErrorMessage(\n            `Information of '${\n              persons[id - 1].name\n            }' has already been removed from the server`\n          );\n          setTimeout(() => {\n            setErrorMessage(null);\n          }, 5000);\n        });\n    }\n  };\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value);\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value);\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilterwordChange = (event) => {\n    setNewFilterword(event.target.value);\n  };\n\n  //根据输入的自字符进行筛选\n  // const filterByValue = function filterByValue(arr, word) {\n  //   return arr.filter((o) =>\n  //     Object.keys(o).some((k) =>\n  //       o[k].toLowerCase().includes(word.toLowerCase())\n  //     )\n  //   );\n  // };\n  //TypeError: o[k].toLowerCase is not a function\n\n  //input数据转化为字符串便于筛选function 运行\n  // const inputValue = newFilterword.toString();\n  // console.log(\"typeof inputValue\", typeof inputValue);\n\n  //得到筛选结果\n  // const result = filterByValue(persons, inputValue);\n  return (\n    <div>\n      <ErrorNotification message={errorMessage} />\n      <SuccessNotification message={successMessage} />\n      <h2>Phonebook</h2>\n      filter shown with{\" \"}\n      <input value={newFilterword} onChange={handleFilterwordChange} />\n      <p>\n        {filterResult.map((filterResult, i) => (\n          <Filter key={i} filterResult={filterResult} />\n        ))}\n      </p>\n      <h1>add a new</h1>\n      <PersonsForm\n        addName={addName}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <p>\n        {/* 数的顺序会影响显示，person,name不等于name,person */}\n        {persons.map((persons, i) => (\n          <Persons\n            key={i}\n            persons={persons}\n            handleDelete={() => handleDelete(persons.id)}\n          />\n        ))}\n      </p>\n    </div>\n  );\n};\nexport default App;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}